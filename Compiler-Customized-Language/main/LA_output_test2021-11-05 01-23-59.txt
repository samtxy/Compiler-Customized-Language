TOKEN: 			 LEXEME: 
Keyword : 		function 
Identifier : 	linkedlist 
Separator : 	( 
Identifier : 	node 
Keyword : 		real 
Separator : 	, 
Identifier : 	pointer 
Keyword : 		integer 
Separator : 	, 
Identifier : 	value 
Keyword : 		real 
Separator : 	) 
Separator : 	{ 
Identifier : 	linear 
Operator : 		= 
Integer : 	1011010 
Separator : 	; 
Keyword : 		return 
Identifier : 	linear 
Operator : 		+ 
Real : 	51.22 
Operator : 		* 
Real : 	2.123 
Operator : 		- 
Identifier : 	node 
Separator : 	; 
Separator : 	} 
Keyword : 		function 
Identifier : 	dollar 
Separator : 	( 
Identifier : 	penny 
Keyword : 		integer 
Separator : 	) 
Separator : 	{ 
Identifier : 	cash 
Operator : 		= 
Real : 	7.2221 
Separator : 	; 
Identifier : 	change 
Operator : 		= 
Identifier : 	cash 
Operator : 		+ 
Identifier : 	penny 
Operator : 		+ 
Real : 	30.21 
Separator : 	; 
Keyword : 		return 
Identifier : 	linkedlist 
Separator : 	( 
Identifier : 	node 
Separator : 	, 
Identifier : 	change 
Separator : 	, 
Identifier : 	cash 
Separator : 	) 
Separator : 	; 
Separator : 	} 
Separator : 	# 
Keyword : 		real 
Identifier : 	j 
Separator : 	, 
Identifier : 	k 
Separator : 	; 
Identifier : 	k 
Operator : 		= 
Integer : 	200 
Separator : 	; 
Keyword : 		while 
Separator : 	( 
Identifier : 	j 
Operator : 		== 
Keyword : 		true 
Separator : 	) 
Separator : 	{ 
Keyword : 		if 
Separator : 	( 
Identifier : 	k 
Operator : 		< 
Integer : 	200 
Separator : 	) 
Separator : 	{ 
Identifier : 	k 
Operator : 		= 
Identifier : 	k 
Operator : 		- 
Integer : 	1 
Separator : 	; 
Keyword : 		get 
Separator : 	( 
Identifier : 	twoHundred 
Separator : 	, 
Identifier : 	times 
Separator : 	) 
Separator : 	; 
Keyword : 		if 
Separator : 	( 
Identifier : 	k 
Operator : 		== 
Integer : 	0 
Separator : 	) 
Separator : 	{ 
Identifier : 	j 
Operator : 		= 
Keyword : 		false 
Separator : 	; 
Keyword : 		get 
Separator : 	( 
Identifier : 	youAreDone 
Separator : 	, 
Identifier : 	congrats 
Separator : 	, 
Identifier : 	seeYa 
Separator : 	) 
Separator : 	; 
Keyword : 		if 
Separator : 	( 
Identifier : 	j 
Operator : 		== 
Keyword : 		false 
Separator : 	) 
Identifier : 	getOut 
Operator : 		= 
Keyword : 		false 
Separator : 	; 
Keyword : 		endif 
Separator : 	} 
Keyword : 		else 
Separator : 	{ 
Identifier : 	k 
Operator : 		= 
Identifier : 	k 
Operator : 		- 
Integer : 	5 
Separator : 	; 
Keyword : 		put 
Separator : 	( 
Integer : 	25 
Operator : 		+ 
Identifier : 	Jay 
Separator : 	) 
Separator : 	; 
Separator : 	} 
Keyword : 		endif 
Separator : 	} 
Keyword : 		else 
Separator : 	{ 
Keyword : 		put 
Separator : 	( 
Identifier : 	ASM 
Operator : 		+ 
Real : 	57.42 
Operator : 		+ 
Integer : 	99 
Separator : 	) 
Separator : 	; 
Identifier : 	getOut 
Operator : 		= 
Keyword : 		true 
Separator : 	; 
Separator : 	} 
Keyword : 		endif 
Separator : 	} 
Separator : 	# 
